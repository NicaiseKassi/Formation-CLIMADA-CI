#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'installation CLIMADA
Formation - Analyse des Risques Climatiques - C√¥te d'Ivoire
"""

import sys

def print_header(text):
    print("\n" + "="*60)
    print(f"  {text}")
    print("="*60 + "\n")

def test_module(module_name, display_name=None):
    """Test l'import d'un module"""
    if display_name is None:
        display_name = module_name
    
    try:
        mod = __import__(module_name)
        version = getattr(mod, '__version__', 'version inconnue')
        print(f"‚úÖ {display_name:20} : OK (v{version})")
        return True
    except ImportError as e:
        print(f"‚ùå {display_name:20} : √âCHEC - {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  {display_name:20} : Import√© avec avertissement - {e}")
        return True

def test_climada_components():
    """Test des composants principaux de CLIMADA"""
    print("\nüîß Test des composants CLIMADA...")
    
    components = [
        ('climada.hazard', 'Hazard'),
        ('climada.entity', 'Entity'),
        ('climada.engine', 'Engine'),
        ('climada.util', 'Utilities')
    ]
    
    all_ok = True
    for module, name in components:
        try:
            __import__(module)
            print(f"‚úÖ CLIMADA {name:15} : OK")
        except ImportError as e:
            print(f"‚ùå CLIMADA {name:15} : √âCHEC")
            all_ok = False
    
    return all_ok

def test_data_science_stack():
    """Test de la stack data science"""
    print("\nüìä Test des biblioth√®ques data science...")
    
    modules = [
        ('numpy', 'NumPy'),
        ('pandas', 'Pandas'),
        ('matplotlib', 'Matplotlib'),
        ('scipy', 'SciPy'),
        ('sklearn', 'Scikit-learn')
    ]
    
    results = [test_module(mod, name) for mod, name in modules]
    return all(results)

def test_geo_stack():
    """Test de la stack g√©ospatiale"""
    print("\nüó∫Ô∏è  Test des biblioth√®ques g√©ospatiales...")
    
    modules = [
        ('geopandas', 'GeoPandas'),
        ('shapely', 'Shapely'),
        ('rasterio', 'Rasterio'),
        ('fiona', 'Fiona'),
        ('cartopy', 'Cartopy'),
        ('pyproj', 'PyProj')
    ]
    
    results = [test_module(mod, name) for mod, name in modules]
    return all(results)

def test_climate_stack():
    """Test de la stack climat/m√©t√©o"""
    print("\nüå°Ô∏è  Test des biblioth√®ques climatiques...")
    
    modules = [
        ('xarray', 'Xarray'),
        ('netCDF4', 'NetCDF4'),
        ('h5py', 'HDF5'),
        ('cftime', 'CFTime')
    ]
    
    results = [test_module(mod, name) for mod, name in modules]
    return all(results)

def test_jupyter():
    """Test de Jupyter"""
    print("\nüìì Test de Jupyter...")
    
    modules = [
        ('notebook', 'Jupyter Notebook'),
        ('jupyterlab', 'Jupyter Lab'),
        ('ipykernel', 'IPython Kernel'),
        ('ipywidgets', 'IPyWidgets')
    ]
    
    results = [test_module(mod, name) for mod, name in modules]
    return all(results)

def test_climada_basic_functionality():
    """Test basique de fonctionnalit√© CLIMADA"""
    print("\nüß™ Test de fonctionnalit√© CLIMADA...")
    
    try:
        from climada.hazard import Hazard
        from climada.entity import Exposures
        print("‚úÖ Classes principales import√©es")
        
        # Test cr√©ation d'un hazard vide
        haz = Hazard('FL')  # Flood hazard
        print("‚úÖ Cr√©ation d'un objet Hazard")
        
        # Test cr√©ation d'exposures vides
        exp = Exposures()
        print("‚úÖ Cr√©ation d'un objet Exposures")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur de fonctionnalit√© : {e}")
        return False

def generate_report(results):
    """G√©n√®re un rapport final"""
    print_header("üìã RAPPORT FINAL")
    
    total = len(results)
    passed = sum(results.values())
    failed = total - passed
    
    print(f"Tests ex√©cut√©s : {total}")
    print(f"‚úÖ R√©ussis     : {passed}")
    print(f"‚ùå √âchou√©s     : {failed}")
    print(f"Taux de succ√®s : {(passed/total)*100:.1f}%")
    
    if failed == 0:
        print("\nüéâ TOUTES LES V√âRIFICATIONS ONT R√âUSSI !")
        print("\nVotre environnement CLIMADA est pr√™t √† l'emploi.")
        print("\nPour commencer :")
        print("  1. Lancez Jupyter : jupyter lab")
        print("  2. Ouvrez un notebook de TP dans le dossier TP/")
        print("  3. Bonne formation ! üöÄ")
        return True
    else:
        print("\n‚ö†Ô∏è  CERTAINES V√âRIFICATIONS ONT √âCHOU√â")
        print("\nSolutions possibles :")
        print("  1. Recr√©er l'environnement : conda env create -f environment_formation.yml --force")
        print("  2. Nettoyer le cache : conda clean --all")
        print("  3. Consulter INSTALLATION.md pour plus d'aide")
        return False

def main():
    """Fonction principale"""
    print_header("üîç V√âRIFICATION DE L'INSTALLATION CLIMADA")
    
    print("Formation : Analyse des Risques Climatiques - C√¥te d'Ivoire")
    print("Environnement : climada_formation")
    
    # Ex√©cuter tous les tests
    results = {
        'CLIMADA Core': test_module('climada', 'CLIMADA'),
        'CLIMADA Components': test_climada_components(),
        'Data Science Stack': test_data_science_stack(),
        'Geo Stack': test_geo_stack(),
        'Climate Stack': test_climate_stack(),
        'Jupyter': test_jupyter(),
        'CLIMADA Functionality': test_climada_basic_functionality()
    }
    
    # G√©n√©rer le rapport
    success = generate_report(results)
    
    return 0 if success else 1

if __name__ == '__main__':
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Test interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Erreur inattendue : {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
